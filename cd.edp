// convection-diffusion test example from [John 2000] with adaptive mesh refinement
// standard P1FEM and SUPG
// adaptivity based on residual-H1 or residual-L2 estimator

verbosity =0;
// macro the get the current mesh size 
// parameter 
//  in:  Th the mesh
//       Vh  P1 fespace on Th
//  out : 
// h: the Vh finite element finite set to the current mesh size 
macro  MeshSizecomputation(Th,Vh,h)
{  /* Th mesh
	 Vh  P1 finite element space 
	 h   the P1 mesh size value */
	real[int]  count(Th.nv);
	/* mesh size  (lenEdge = $\int_e 1$)  */
	varf vmeshsizen(u,v)=intalledges(Th,qfnbpE=1)(v); 
	/* number of edge / par vertex */ 
	varf vedgecount(u,v)=intalledges(Th,qfnbpE=1)(v/lenEdge); 
   /*
	  computation of the mesh size
	  ----------------------------- */ 
	count=vedgecount(0,Vh);
	h[]=0.;
	h[]=vmeshsizen(0,Vh);
	/*cout << " count min = "<< count.min << " " << count.max << endl;*/
	h[]=h[]./count;
    /*cout << " -- bound meshsize = " <<h[].min << " " << h[].max << endl;*/
} // end of macro MeshSizecomputation

// macro to remesh according the de residual indicator 
// in: 
//     Th the mesh
//     Ph  P0 fespace on Th
//     Vh  P1 fespace on Th
//     vindicator the varf of to evaluate the indicator to ^2
//     coef on etameam ..
// ------
macro  ReMeshIndicator(Th,Ph,Vh,vindicator,coef)
{
	Vh h=0;
	/*evalutate the mesh size  */
	MeshSizecomputation(Th,Vh,h); 
	Ph etak;  
	etak[]=vindicator(0,Ph);
	cout << " global  Eta  : " << sqrt(etak[].sum) << "  ......... " <<  Th.nv<< endl;
	etak[]=sqrt(etak[]); 
    /*    plot(etak,ps="arei-etak.eps",fill=1,value=1);*/
	real etastar= coef*(etak[].sum/etak[].n);
	/* cout << " etastar = " << etastar << " sum=" << etak[].sum << " " << endl; */

	/* here etaK is discontinous 
	   we use the P1 L2 projection with mass lumping . */
	
	Vh fn,sigma;
	varf veta(unused,v)=int2d(Th)(etak*v);
	varf vun(unused,v)=int2d(Th)(1*v);
	fn[]  = veta(0,Vh);
	sigma[]= vun(0,Vh);
	fn[]= fn[]./ sigma[];
	fn =  max(min(fn/etastar,3.),0.3333) ; 
	
	/* new mesh size */ 
	h = h / fn ; 
	/* plot(h,wait=1); */
	Th=adaptmesh(Th,IsMetric=1,h,splitpbedge=1,nbvx=1e+7);
}

// the classical  L space problem. 

// mesh definition
border ba(t=0,0.5){x=t;   y=0;  label=1;}; 
border bb(t=0,0.5){x=0.5; y=t;  label=1;};
border bc(t=0.5,1.0){x=t; y=0.5;label=1;};
border bd(t=0.5,1.0){x=1; y=t;  label=1;};
border be(t=0,1.0){x=1-t; y=1;  label=1;};
border bf(t=0,1.0){x=0;   y=1-t;label=1;};
mesh Th = buildmesh (ba(10) + bb(10) + bc(10) +bd(10) + be(20) + bf(20));
// FE space definition ---
fespace Vh(Th,P1); // for the mesh size 
fespace Ph(Th,P0); // for the indicator   

real hinit=0.01; // 
Vh   h=hinit; // the FE fonction  for the mesh size 
// to build a mesh with a given mesh size  : meshsize
Th=adaptmesh(Th,h,IsMetric=1,splitpbedge=1,nbvx=5e+6);
//plot(Th,wait=1);

Vh u,v; 

func r = sqrt((x-0.5)^2 + (y-0.5)^2);
func f = 100*r*(r-0.5)*(r-sqrt(2)/2);

real A = -1.0e-6;
//real[int] b=[1,1];
real b1 = 2;
real b2 = 3;
real c = 1;
real g = 0;

Ph hT = hTriangle;
Ph deltaT = min(hT^2/abs(A),hT/sqrt(b1^2+b2^2));

problem CDGalerkin(u,v) =
    int2d(Th,qforder=5)( A*(dx(u)*dx(v) + dy(u)*dy(v)) + (b1*dx(u)+b2*dy(u))*v + c*u*v ) + on(1,u=g)
  - int2d(Th,qforder=5)( f*v );

problem CDSUPG(u,v) =
    int2d(Th,qforder=5)( A*(dx(u)*dx(v) + dy(u)*dy(v)) + (b1*dx(u)+b2*dy(u))*v + c*u*v ) + on(1,u=g)
  + int2d(Th,qforder=5)( deltaT*(A*(dxx(u)+dyy(u)) + (b1*dx(u)+b2*dy(u)) + c*u)*(b1*dx(v)+b2*dy(v)) )
  - int2d(Th,qforder=5)( f*v + deltaT*f*(b1*dx(v)+b2*dy(v)) );

varf indicatorH1(unused,chiK) = 
     intalledges(Th)(chiK*0.5*lenEdge*square(A*jump(N.x*dx(u)+N.y*dy(u))))
    +int2d(Th)(chiK*square(hTriangle*(f - A*(dxx(u)+dyy(u)) - (b1*dx(u)+b2*dy(u)) - c*u)) );

varf indicatorL2(unused,chiK) = 
     intalledges(Th)(chiK*0.5*lenEdge^3*square(A*jump(N.x*dx(u)+N.y*dy(u))))
    +int2d(Th)(chiK*square(hTriangle^2*(f - A*(dxx(u)+dyy(u)) - (b1*dx(u)+b2*dy(u)) - c*u)) );


for (int i=0;i<8;i++)
{
//	u=u;
    plot(Th,wait=1);
	CDSUPG;
    plot(u,wait=1,value=1,fill=true);
	real cc=0.7;
	if(i>5) cc=1;
        if(i<9)
	 ReMeshIndicator(Th,Ph,Vh,indicatorL2,cc);;
}



